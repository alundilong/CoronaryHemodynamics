#----------------------------------*-sh-*--------------------------------------
#
# License
#
#     Copyright (C) 2011-2017 blueCAPE Lda
#     blueCFD(R) is a registered trade mark of blueCAPE Lda
#     OpenFOAM(R) is a registered trade mark of ESI-OpenCFD
#
#     This file is part of blueCAPE's blueCFD-Core port of OpenFOAM technology
#     for Windows and it abides to the same GNU GPL v3 license.
#     blueCFD-Core was designed to improve the user experience in using
#     OpenFOAM in Windows via MSYS/MSYS2 and Windows command line.
#     For more information about blueCFD-Core, visit:
#         http://bluecfd.com/Core
#
#     OpenFOAM Foundation website: http://www.openfoam.org
#     OpenFOAM+ website (ESI-OpenCFD): http://www.openfoam.com
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     sourceOF
#
# Description
#     Help script for choosing which OpenFOAM environment to use.
#
#------------------------------------------------------------------------------

# Function for ensuring that blueCFD-Core installation structure is used
setup_blueCFD_environment()
{
  # Unload the current OpenFOAM/foam-extend environment
  if [ -n "$WM_PROJECT_DIR" ]
  then
      for WM_UNSET in \
          $WM_PROJECT_DIR/etc/config/unset.sh \
          $WM_PROJECT_DIR/etc/config.sh/unset
      do
          if [ -e "$WM_UNSET" ]
          then
              source $WM_UNSET
              break
          fi
      done
      unset WM_UNSET
  fi

  export FOAM_INST_DIR=$HOME/blueCFD
  
  if [ -n "$1" ]
  then
      if (mount | grep -q "on /home type")
      then
          export WM_PROJECT_USER_DIR=$HOME/$USER-$1

          [ ! -d "${WM_PROJECT_USER_DIR}" ] &&
              cp -r $FOAM_INST_DIR/$USER-$1 $HOME/
      else
          export WM_PROJECT_USER_DIR=$FOAM_INST_DIR/$USER-$1
      fi
  fi

  . $HOME/defaultmpi.sh
  [ -z "$WM_MPLIB" ] && WM_MPLIB=""
  export WM_MPLIB

  #necessary for using the internal reader and faster launch of ParaView.
  alias paraFoam='paraFoam -builtin -minpath'
  alias parafoam='paraFoam -builtin -minpath'
  alias paraview='(export PATH=/bin:/usr/bin:/usr/local/bin:$ParaView_DIR/bin; paraview)'
}

# Function for adding version to installed list
blueCFDCore_AppendInstalledVersion()
{
  export countver=$(expr $countver + 1)

  if [ -z "$BLUECFDCORE_INSTALLED_VERSIONS" ]
  then
    export BLUECFDCORE_INSTALLED_VERSIONS="$1"
    export BLUECFDCORE_INSTALLED_VERSION_LIST="$2 ($1)"
  else
    export BLUECFDCORE_INSTALLED_VERSIONS="${BLUECFDCORE_INSTALLED_VERSIONS}|$1"
    export BLUECFDCORE_INSTALLED_VERSION_LIST="${BLUECFDCORE_INSTALLED_VERSION_LIST}|$2 ($1)"
  fi
}

# Function for adding version to possible list
blueCFDCore_AppendPossibleVersion()
{
  export countposs=$(expr $countposs + 1)

  if [ -z "$BLUECFDCORE_POSSIBLE_VERSIONS" ]
  then
    export BLUECFDCORE_POSSIBLE_VERSIONS="$1"
    export BLUECFDCORE_POSSIBLE_VERSION_LIST="$2 ($1)"
  else
    export BLUECFDCORE_POSSIBLE_VERSIONS="${BLUECFDCORE_POSSIBLE_VERSIONS}|$1"
    export BLUECFDCORE_POSSIBLE_VERSION_LIST="${BLUECFDCORE_POSSIBLE_VERSION_LIST}|$2 ($1)"
  fi
}

# Load in possible pre-defined versions
blueCFDCore_LoadInPredefinedVersions()
{
  if [ -z "$BLUECFDCORE_DEFAULT" ]
  then
    # Initialize the environment variables that will have the possible
    # environments and descriptions
    export BLUECFDCORE_INSTALLED_VERSIONS=""
    export BLUECFDCORE_INSTALLED_VERSION_LIST=""
    export BLUECFDCORE_POSSIBLE_VERSIONS=""
    export BLUECFDCORE_POSSIBLE_VERSION_LIST=""
    export BLUECFDCORE_DEFAULT="$HOME/.defaultCore"

    export countver=0
    export countposs=0
    export option=0

    if [ -d $HOME/.blueCFDCore ]
    then
        for file in $HOME/.blueCFDCore/{of[1-9]*.sh,ofp*.sh,fe*.sh}
        do
            if [ -e "${file}" ]
            then
                . "${file}"
            fi
        done
    fi
  fi
}

blueCFDCore_UnloadPredefinedVersions()
{
  unset option countver countposs
  unset BLUECFDCORE_INSTALLED_VERSIONS BLUECFDCORE_INSTALLED_VERSION_LIST
  unset BLUECFDCORE_POSSIBLE_VERSIONS BLUECFDCORE_POSSIBLE_VERSION_LIST
  unset BLUECFDCORE_DEFAULT
}

# Function for sourcing the current alias
blueCFDCore_SourceCurrentSettings()
{
  echo "Setting environment for $BLUECFDCORE_ENVIRONMENT_NAME, using" \
       "$WM_MPLIB - please wait..."

  eval "$BLUECFDCORE_ENVIRONMENT_ALIAS"

  echo "Environment is now ready. Notes:"
  echo "   - You can change between installed versions by running: ofmenu"
  echo "   - You can change to other predefined versions by running: ofmenuNew"
}

# Function for loading option from ofmenu
blueCFDCore_LoadActiveMenuOption()
{
  if [ "$option" -ge 1 -a "$option" -le $countver ]
  then

    export BLUECFDCORE_ENVIRONMENT_NAME=$( \
        echo $BLUECFDCORE_INSTALLED_VERSION_LIST | \
            sed -e 's=|=\n=g' | \
            sed -e $option'!d')
    export BLUECFDCORE_ENVIRONMENT_ALIAS=$( \
        echo $BLUECFDCORE_INSTALLED_VERSIONS | \
            sed -e 's=|=\n=g' | \
            sed -e $option'!d')

    blueCFDCore_SourceCurrentSettings

    # Store selected version as the default
    (
      echo "BLUECFDCORE_ENVIRONMENT_NAME='$BLUECFDCORE_ENVIRONMENT_NAME'"
      echo "BLUECFDCORE_ENVIRONMENT_ALIAS='$BLUECFDCORE_ENVIRONMENT_ALIAS'"
    ) > $BLUECFDCORE_DEFAULT

    unset BLUECFDCORE_ENVIRONMENT_NAME BLUECFDCORE_ENVIRONMENT_ALIAS

  fi
}

# Function for loading option from ofmenuNew
blueCFDCore_LoadPossibleMenuOption()
{
  if [ "$option" -ge 1 -a "$option" -le $countposs ]
  then

    export BLUECFDCORE_ENVIRONMENT_NAME=$( \
        echo $BLUECFDCORE_POSSIBLE_VERSION_LIST | \
            sed -e 's=|=\n=g' | \
            sed -e $option'!d')
    export BLUECFDCORE_ENVIRONMENT_ALIAS=$( \
        echo $BLUECFDCORE_POSSIBLE_VERSIONS | \
            sed -e 's=|=\n=g' | \
            sed -e $option'!d')

    blueCFDCore_SourceCurrentSettings

    # Store selected version as the default
    (
      echo "BLUECFDCORE_ENVIRONMENT_NAME='$BLUECFDCORE_ENVIRONMENT_NAME'"
      echo "BLUECFDCORE_ENVIRONMENT_ALIAS='$BLUECFDCORE_ENVIRONMENT_ALIAS'"
    ) > $BLUECFDCORE_DEFAULT

    unset BLUECFDCORE_ENVIRONMENT_NAME BLUECFDCORE_ENVIRONMENT_ALIAS

  fi
}

# Function for showing the possible versions
ofmenu()
{
  blueCFDCore_LoadInPredefinedVersions

  echo "-------------- Setting up OpenFOAM variables --------------"

  if [ -n "$WM_MPLIB" ]
  then
    echo "-- Current MPI chosen for parallel operations: $WM_MPLIB"
  else
    echo "-- No MPI chosen, therefore no parallel mode available."
  fi

  echo "Choose one option for selecting the build architecture:"

  counter=0
  echo $BLUECFDCORE_INSTALLED_VERSION_LIST | \
    sed -e 's=^=\t=' -e 's=|=\n\t=g' | \
    while read line
  do
      export counter=$(expr $counter + 1)
      echo "    $counter - $line"
  done
  unset counter

  echo "Choose one of the numbers 1 to $countver (any other for none) then" \
       "press Enter:"
  read option

  blueCFDCore_LoadActiveMenuOption

  # Finally unload predefined versions
  blueCFDCore_UnloadPredefinedVersions
}

# Function for showing the possible versions
ofmenuNew()
{
  blueCFDCore_LoadInPredefinedVersions

  echo "---------- Setting up OpenFOAM variables for new build ----------"

  if [ -n "$WM_MPLIB" ]
  then
    echo "-- Current MPI chosen for parallel operations: $WM_MPLIB"
  else
    echo "-- No MPI chosen, therefore no parallel mode available."
  fi

  echo "Choose one option for selecting the new build architecture:"

  export counter=0
  echo $BLUECFDCORE_POSSIBLE_VERSION_LIST | \
    sed -e 's=^=\t=' -e 's=|=\n\t=g' | \
    while read line
  do
      export counter=$(expr $counter + 1)
      echo "    $counter - $line"
  done
  unset counter

  echo "Choose one of the numbers 1 to $countposs (any other for none) then" \
       "press Enter:"
  read option

  blueCFDCore_LoadPossibleMenuOption

  # Finally unload predefined versions
  blueCFDCore_UnloadPredefinedVersions
}

# Initialize with the default settings, so that blueCFD-Core environment is
# ready to be used
setup_blueCFD_environment

# Load-in installed versions
blueCFDCore_LoadInPredefinedVersions

if [ $countver -eq 1 ]
then

  # Default to the only version that exists
  option=1
  blueCFDCore_LoadActiveMenuOption

elif [ $countver -eq 0 ]
then

  # Load menu for all predefined versions that aren't built
  ofmenuNew

elif [ $countver -gt 1 ]
then

  # Use default or show menu
  if [ -e "$BLUECFDCORE_DEFAULT" ]
  then

    source $BLUECFDCORE_DEFAULT
    blueCFDCore_SourceCurrentSettings

  fi

  # Load menu, if no valid option was found
  if [ -z "$FOAM_SETTINGS" ]
  then

    ofmenu

  fi

fi

if [ -z "$WM_PROJECT_DIR" ]
then
  echo "WARNING: No environment was activated."
  echo "   You can start any of the installed environments by running: ofmenu"
  echo "   You can start any of the other predefined environments by " \
       "running: ofmenuNew"
fi

# Finally unload predefined versions, at least just in case
blueCFDCore_UnloadPredefinedVersions
